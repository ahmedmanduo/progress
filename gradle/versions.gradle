/*
 * Copyright (c) 2015 Mark Platvoet<mplatvoet@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

ext {
    enrichVersion = this.&enrichVersion
}


def enrichVersion() {
    def circleBuildNr = System.getenv('CIRCLE_BUILD_NUM')?.trim()
    def buildMetaData = circleBuildNr ? circleBuildNr : buildTime()

    def kotlinVersion = extractKotlinMilestoneVersion()
    def identifier = kotlinVersion ? "kotlinM$kotlinVersion" : "unknown"

    allprojects*.version = "$appVersion-$identifier+$buildMetaData"
}

String extractKotlinMilestoneVersion() {
    def rawVersion = extractRawKotlinVersion()
    if (rawVersion.contains("SNAPSHOT")) {
        return "-SS"
    }
    if (rawVersion) {
        def matcher = rawVersion =~ /\d+/
        matcher.find()
        matcher.find(matcher.end())
        return rawVersion.substring(matcher.start(), matcher.end())
    }
    return null
}

String extractRawKotlinVersion() {
    for (project in subprojects) {
        for (scope in project.configurations.all) {
            for (dep in scope.dependencies) {
                def name = dep.name.toString()
                def group = dep.group.toString()
                if (name.equals("kotlin-stdlib") && group.equals("org.jetbrains.kotlin")) {
                    return dep.version
                }
            }
        }
    }
    return null
}


def buildTime() {
    def df = new java.text.SimpleDateFormat("yyyyMMdd'T'HHmm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}